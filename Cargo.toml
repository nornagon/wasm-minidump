[package]
name = "wasm-minidump"
version = "0.1.0"
authors = ["Jeremy Rose <nornagon@nornagon.net>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[dependencies]
wasm-bindgen = "0.2.63"

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = true }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

minidump-processor = "0.3.0"
minidump = "0.3.0"
minidump-common = "0.3.0"
breakpad-symbols = "0.3.0"

wasm-bindgen-futures = "0.4.24"
js-sys = "0.3.51"
async-trait = "0.1.50"

[dependencies.web-sys]
version = "0.3.4"
features = [
  'Headers',
  'Request',
  'RequestInit',
  'RequestMode',
  'RequestCache',
  'Response',
  'Window',
]

[dev-dependencies]
wasm-bindgen-test = "0.3.13"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

[patch.crates-io]
minidump = { path = "../rust-minidump/minidump" }
minidump-processor = { path = "../rust-minidump/minidump-processor" }
breakpad-symbols = { path = "../rust-minidump/breakpad-symbols" }
